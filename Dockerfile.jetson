FROM nvcr.io/nvidia/l4t-base:r32.7.1
ARG APPDIR="/root/app"
ARG BUILDDIR="/root/build"

# OpenCV (4.5.1) installation from source
# The default OpenCV version on the Jetson Nano (Jetpack 4.6.1) is 4.1.1
# The default version 4.1.1 causes dependency issues
WORKDIR ${BUILDDIR}
ARG OPENCV_VERSION="4.5.1"

RUN sh -c "echo '/usr/local/cuda/lib64' >> /etc/ld.so.conf.d/nvidia-tegra.conf" && \
    ldconfig && \
    apt-get update && \
    apt-get install -y \
    git cmake unzip pkg-config libpng-dev libtiff-dev \
    libavcodec-dev libavformat-dev libswscale-dev \
    libgtk2.0-dev libcanberra-gtk* \
    python3-dev python3-numpy python3-pip \ 
    libxvidcore-dev libx264-dev libgtk-3-dev \
    libtbb2 libtbb-dev libdc1394-22-dev \
    libv4l-dev v4l-utils \
    libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
    libavresample-dev libvorbis-dev libxine2-dev \
    libfaac-dev libmp3lame-dev libtheora-dev \
    libopencore-amrnb-dev libopencore-amrwb-dev \
    libopenblas-dev libatlas-base-dev libblas-dev libopenblas-base \
    liblapack-dev libeigen3-dev gfortran \
    libhdf5-dev protobuf-compiler \
    libprotobuf-dev libgoogle-glog-dev libgflags-dev \
    libopenmpi-dev libomp-dev ffmpeg

RUN wget -O opencv.zip https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip && \
    wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip && \
    unzip opencv.zip && unzip opencv_contrib.zip && \
    mv opencv-${OPENCV_VERSION} opencv && mv opencv_contrib-${OPENCV_VERSION} opencv_contrib && \
    rm opencv.zip && rm opencv_contrib.zip && \
    mkdir ./opencv/build

WORKDIR /root/build/opencv/build

RUN cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr \
    -D OPENCV_EXTRA_MODULES_PATH=${BUILDDIR}/opencv_contrib/modules \
    -D EIGEN_INCLUDE_PATH=/usr/include/eigen3 -D WITH_OPENCL=OFF \
    -D WITH_CUDA=ON -D CUDA_ARCH_BIN=5.3 -D CUDA_ARCH_PTX="" \
    -D WITH_CUDNN=ON -D WITH_CUBLAS=ON -D ENABLE_FAST_MATH=ON \
    -D CUDA_FAST_MATH=ON -D OPENCV_DNN_CUDA=ON -D ENABLE_NEON=ON \
    -D WITH_QT=OFF -D WITH_OPENMP=ON -D WITH_OPENGL=ON -D BUILD_TIFF=ON \
    -D WITH_FFMPEG=ON -D WITH_GSTREAMER=ON -D WITH_TBB=ON -D BUILD_TBB=ON \
    -D BUILD_TESTS=OFF -D WITH_EIGEN=ON -D WITH_V4L=ON -D WITH_LIBV4L=ON \
    -D OPENCV_ENABLE_NONFREE=ON -D INSTALL_C_EXAMPLES=OFF \
    -D INSTALL_PYTHON_EXAMPLES=OFF -D BUILD_NEW_PYTHON_SUPPORT=ON \
    -D BUILD_opencv_python3=TRUE -D OPENCV_GENERATE_PKGCONFIG=ON \
    -D BUILD_EXAMPLES=OFF .. && \
    make -j4

RUN make install && \
    ldconfig && \
    make clean && \
    apt-get update

# PyTorch (1.8.0) and Torchvision (0.9.0) installation via pip wheel
WORKDIR ${BUILDDIR}
ARG PYTORCH_VERSION="1.8.0"
ARG TORCHVISION_VERSION="0.9.0"
ARG TORCHVISION_BRANCH="release/0.9"

RUN wget https://nvidia.box.com/shared/static/p57jwntv436lfrd78inwl7iml6p13fzh.whl \
    -O torch-${PYTORCH_VERSION}-cp36-cp36m-linux_aarch64.whl && \
    pip3 install Cython && \
    pip3 install numpy torch-${PYTORCH_VERSION}-cp36-cp36m-linux_aarch64.whl

RUN apt-get install -y libjpeg-dev zlib1g-dev libpython3-dev libfreetype6-dev && \
    git clone --branch ${TORCHVISION_BRANCH} https://github.com/pytorch/vision torchvision && \
    cd torchvision && \
    export BUILD_VERSION=${TORCHVISION_VERSION} && \
    python3 setup.py install --user

RUN pip3 install nanocamera

WORKDIR ${APPDIR}
COPY assets.py model.py utilities.py jetson.py ./
COPY models/ ./models/
CMD ["python3", "jetson.py"]
